    /**
     * The 'afterBind' event is invoked after any new file or collection is
     * created.
     *
     * We are intercepting it, because we need to look at newly created
     * calendar objects and do additional processing if they are also
     * scheduling object resources.
     *
     * @param string $uri
     * @return void
     */
    /*
    public function afterBind($uri) {

        $node = $this->server->tree->getNodeForPath($uri);
        if (!$node instanceof Sabre_CalDAV_ICalendarObject)
            return;

        // It was indeed a calendar object.
        list($parentUri) = Sabre_DAV_URLUtil::splitPath($uri);
        $parentCalendar = $this->server->tree->getNodeForPath($uri);

        // We need to figure out the owner principal
        $owner = $parentCalendar->getOwner();

        // No owner ??
        if (is_null($owner)) return;

        $uas = '{' . Sabre_CalDAV_Plugin::NS_CALDAV . '}calendar-user-address-set';
        // Figure out the users' addresses
        $properties = $this->server->tree->getProperties($owner, array($uas));

        $addresses = $properties[$uas]?$properties[$uas]:null;
        if ($addresses instanceof Sabre_DAV_Property_HrefList) {
            $addresses = $addresses->getHrefs();
        }

        // No addresses?
        if (!$addresses) return;

        $iCalendarData = $node->get();
        if (is_resource($icalendarData))
            $icalendarData = stream_get_contents($iCalendarData);

        $vObject = Sabre_VObject_Reader::read($icalendarData);
        if(!$this->isSchedulingObject($vObject, $addresses, $attendeeType)) {
            return;
        }
        $this->createSchedulingResource($node, $vObject, $attendeeType);


    }*/

    /**
     * This method is responsible for cases where a new scheduling resource
     * was created. This is either through a PUT of a new object, or a
     * modification from an existing object so it becomes a scheduling
     * resource.
     *
     * @param Sabre_CalDAV_ICalendarObject $objectNode
     * @param Sabre_VObject_Component $vObject
     * @param int $attendeeType 1 or 2 if it's a organizer or attendee
     * @return void
     */
    /*
    protected function createSchedulingResource(Sabre_CalDAV_ICalendarObject $objectNode, Sabre_VObject_Component $vObject, $attendeeType) {

        $aclPlugin = $this->server->getPlugin('acl');
        $NS = '{' . Sabre_CalDAV_Plugin::NS_CALDAV . '}';

        switch($attendeeType) {

            // Organizer
            case 1 :
                $attendees = array();

                if (!isset($vObject->SEQUENCE)) {
                    $vObject->SEQUENCE = 1;
                } else {
                    $vObject->SEQUENCE = ((string)$vObject->SEQUENCE) + 1;
                }

                if (!isset($vObject->DTSTAMP)) {
                    $dtStamp = new Sabre_VObject_Element_DateTime('DTSTAMP');
                    $dtStamp->setDateTime(new DateTime('NOW'), Sabre_VObject_Element_DateTime::UTC);
                    $vObject->add($dtStamp);
                }

                $inboxes = new SplObjectStorage();
                $defaultCalendars = new SplObjectStorage();

                foreach($vObject->selectComponents() as $vComponent) {

                    foreach($vComponent->attendee as $vAttendee) {

                        // We are only supposed to handle attendees that have
                        // the schedule agent set to server (or not set at,
                        // which also means 'server'.
                        if (isset($vAttendee['SCHEDULE-AGENT']) && strtoupper($vAttendee['SCHEDULE-AGENT']) !== 'SERVER') {
                            continue;
                        }

                        // Lets see if we can find this attendee
                        $result = $acl->principalSeach(
                            array($NS . 'calendar-user-address-set' => (string)$vAttendee),
                            array(
                                $NS . 'schedule-inbox-URL',
                                $NS . 'calendar-home-set',
                                $NS . 'schedule-default-calendar',
                            )
                        );

                        if (!count($result)) {
                            // Attendee not found
                            $vAttendee['SCHEDULE-STATUS'] = '3.404'; // Our made-up number for 'not found'
                            continue;
                        } else {
                            $vAttendee['SCHEDULE-STATUS'] = '2.0';
                        }
                        $inboxUrl = $result[0][200][$NS . 'schedule-inbox-URL'];

                        $inbox = $this->server->getNodeForPath($inboxUrl);
                        if (!$inboxes->contains($inbox)) {
                            $inboxes->attach($inbox);
                        }
                        if (isset($result[0][200][$NS . 'schedule-default-calendar'])) {
                            $calendar = $this->server->getNodeForPath($result[0][200][$NS . 'schedule-default-calendar']);
                        } else {
                            // Grabbing the first calendar
                            $calendarHome = $this->server->getNodeForPath($result[0][200][$NS . 'calendar-home-set']);
                            foreach($calendarHome->getChildren() as $calendar) {
                                if ($calendar instanceof Sabre_CalDAV_ICalendar)
                                    break;
                            }
                        }
                        if (!$defaultCalendars->contains($calendar)) {
                            $defaultCalendars->attach($calendar);
                        }

                    }

                }

                // Sending everybody the iTIP message
                $iCalendarData = $vObject->serialize();
                foreach($inboxes as $inbox) {
                    $inbox->deliver($iCalendarData);
                }
                // Updating the organizers' event
                $objectNode->put($iCalendarData);

                // Creating attendee standard calendar objects
                foreach($defaultCalendars as $calendar) {
                    $calendar->createFile(Sabre_DAV_UUIDUtil::generateUUID() . '.vcf');
                }
                break;

            // Attendee
            case 2 :
                throw new Sabre_DAV_Exception_NotImplemented('This part of the specification has not yet been implemented');
                break;

        }


    }*/

    /**
     * Checks if a VObject is also a scheduling object resource.
     *
     * This method will also pass 1 or 2 to the attendeeType argument,
     * depending on if it matched a user with the organizer, or attendee
     * respectively.
     *
     * The compType argument is filled with the type of iCalendar component,
     * which may either be VEVENT, VTODO or VJOURNAL.
     *
     * @param Sabre_VObject_Component $vObject
     * @param array $userAddresses
     * @param int $attendeeType
     * @return bool
     */
    /*
    protected function isSchedulingObject(Sabre_VObject_Component $vObject, array $userAddresses, &$attendeeType = null) {

        $vComponent = null;
        foreach($vObject->getComponents() as $vComponent) {

            if ($vComponent->name = 'VTIMEZONE')
                continue;

            break;

        }

        // This should actually not happen for valid iCalendar objects.
        if (is_null($vComponent))
            return false;

        $organizer = (string)$vComponent->organizer;
        if (!$organizer)
            continue;

        if (in_array((string)$organizer, $userAddresses)) {
            $attendeeType = 1;
            return true;
        }

        foreach($vComponent->attendee as $attendee) {

            $attendee = (string)$attendee;

            if (in_array((string)$organizer, $userAddresses)) {
                $attendeeType = 2;
                return true;
            }

        }

        return false;

    }*/

}
